image[0][0] = 0
image[0][1] = 0
image[0][2] = 0
image[0][3] = 0
image[0][4] = 0

image[0][0] = 1
image[1][0] = 1
image[2][0] = 1
image[3][0] = 1
image[4][0] = 1

___________________________________________________________


##### Your Code Here #####

def MaxPooling(image, filterHeight, filterWidth, stride):

#   image[0][0] = 0
#   image[0][1] = 0
#   image[0][2] = 0
#   image[0][3] = 0
#   image[0][4] = 0
  
#   image[0][0] = 1
#   image[1][0] = 1
#   image[2][0] = 1
#   image[3][0] = 1
#   image[4][0] = 1 
  
#   for i, row in enumerate(image):
#     for j, column in enumerate(image):
      
  pooled_image = np.zeros([100,100])
  return pooled_image
  
final_image = MaxPooling(grayscale, 2, 2, 2)

plt.imshow(final_image, cmap = 'gray')
plt.title('Max Pooled Image'),
plt.xticks([]) 
plt.yticks

_____________________________________________________________

def MaxPooling(image, filterHeight, filterWidth, stride):

  pooled_image = np.zeros([96,96])
  
  for i, row in enumerate(image):
    for j, column in enumerate(image):
      pooled_image[0][0] = max(image[0][0], image[0][1], image[1][0], image[1][1])
      pooled_image[0][1] = max(image[0][2], image[0][3], image[1][2], image[1][3])
      pooled_image[0][2] = max(image[0][4], image[0][5], image[1][4], image[1][5])
       
#   print(image[0][0])
#   print(image[0][1])
#   print(image[1][0])
#   print(image[1][1])
  
#   print(first_value)
  
  return pooled_image
  
final_image = MaxPooling(grayscale, 2, 2, 2)

plt.imshow(final_image, cmap = 'gray')
plt.title('Max Pooled Image'),
plt.xticks([]) 
plt.yticks([])

_____________________________________________________________


def MaxPooling(image, filterHeight, filterWidth, stride):
  
  pooled_image = np.zeros([int(image.shape[0]/filterHeight),int(image.shape[1]/filterWidth)])
  
  for i, row in enumerate(pooled_image):
    for j, column in enumerate(pooled_image):     
      pooled_image[i][j] = max(image[i*2][j*2], image[i*2][j*2+1], image[i*2+1][j*2], image[i*2+1][j*2+1])

  
  return pooled_image
  
final_image = MaxPooling(grayscale, 2, 2, 2)

plt.imshow(final_image, cmap='gray')
plt.title('Max Pooled Image'),
plt.xticks([]) 
plt.yticks([])

another_image = MaxPooling(final_image, 2, 2, 2)

plt.imshow(another_image, cmap='gray')
plt.title('Max Pooled Image'),
plt.xticks([]) 
plt.yticks([])

_____________________________________________________________


##### Your Code Here #####

def MaxPooling(image, filterHeight, filterWidth, stride):
  
  pooled_image = np.zeros([int(image.shape[0]/filterHeight),int(image.shape[1]/filterWidth)])
  
  for i, row in enumerate(pooled_image):
    for j, column in enumerate(pooled_image):     
      pooled_image[i][j] = max(image[i*stride][j*stride], image[i*stride][j*stride+1], image[i*stride+1][j*stride], image[i*stride+1][j*stride+1])

  return pooled_image
  
final_image = MaxPooling(grayscale, 2, 2, 2)

plt.imshow(final_image, cmap='gray')
plt.title('Max Pooled Image'),
plt.xticks([]) 
plt.yticks([])




